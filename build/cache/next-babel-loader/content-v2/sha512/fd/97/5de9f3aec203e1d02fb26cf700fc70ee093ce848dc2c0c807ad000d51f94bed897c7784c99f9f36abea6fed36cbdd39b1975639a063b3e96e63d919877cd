{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from \"react\";\nimport { AutoComplete } from 'antd';\nimport { googleAutocomplete } from \"./google-autocomplete\";\nimport \"./auto-complete.css\";\nimport { IoIosArrowDown, IoIosLocate } from \"react-icons/io\";\nimport { BiCurrentLocation } from \"react-icons/bi\";\nimport { GEO_CODE_API_URL } from \"../../../constants\";\nimport { asyncLocalStorage } from '../../utils/localStorage';\nimport { useRouter } from 'next/router';\n\nfunction debounce(func, timeout = 300) {\n  let timer;\n  return (...args) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, timeout);\n  };\n}\n\nlet geocoder;\nexport default function PredictionsOnInputChange({\n  searchValue,\n  onChange,\n  setSearchValue\n}) {\n  const router = useRouter();\n  const {\n    0: predictions,\n    1: setPredictions\n  } = useState([]);\n  const {\n    0: cityName,\n    1: setCityName\n  } = useState(null);\n  console.log(setSearchValue, onChange);\n\n  const onSelect = data => {\n    console.log('onSelect', data);\n  };\n\n  useEffect(async () => {\n    if (cityName != null) {\n      router.reload();\n    }\n  }, []);\n\n  const onSearch = async text => {\n    try {\n      if (!text) {\n        setPredictions([]);\n        return;\n      }\n\n      const nextPredictions = await googleAutocomplete(text);\n      const results = nextPredictions.map((prediction, index) => {\n        var _prediction$structure;\n\n        const label = prediction === null || prediction === void 0 ? void 0 : (_prediction$structure = prediction.structured_formatting) === null || _prediction$structure === void 0 ? void 0 : _prediction$structure.main_text;\n        return {\n          key: index,\n          value: label,\n          label\n        };\n      });\n      setPredictions(results);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const getCurrentLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(showPosition);\n    }\n  };\n\n  const showPosition = async position => {\n    var _result$results$, _result$results$2;\n\n    // const lat = position.coords.latitude;\n    // const long = position.coords.longitude;\n    const lat = \"43.20577420\";\n    const long = \"-77.66710000\"; // const lat = \"43.12285180\";\n    // const long = \"-77.61803020\";\n\n    const apiUrl = `${GEO_CODE_API_URL}&latlng=${lat},${long}`;\n    const rawRespnse = await fetch(apiUrl);\n    const result = await rawRespnse.json();\n    onChange(result === null || result === void 0 ? void 0 : (_result$results$ = result.results[0]) === null || _result$results$ === void 0 ? void 0 : _result$results$.formatted_address);\n    console.log(result === null || result === void 0 ? void 0 : result.results[0]);\n    console.log(\"address: \" + (result === null || result === void 0 ? void 0 : (_result$results$2 = result.results[0]) === null || _result$results$2 === void 0 ? void 0 : _result$results$2.formatted_address)); // geocoder = new window.google.maps.Geocoder();\n    // var latlng = new google.maps.LatLng(lat, long);\n    // var itemLocality=\"\";\n    //   var country = null, countryCode = null, cityName = null, cityAlt = null;\n    //   new window.google.maps.Geocoder().geocode({'latLng' : latlng}, function(results, status) {\n    //     if (status == google.maps.GeocoderStatus.OK) {\n    //         if (results[1]) {\n    //             var c, lc, component;\n    //             for (var r = 0, rl = results.length; r < rl; r += 1) {\n    //                 var result = results[r];\n    //                 if (!cityName && result.types[0] === 'locality') {\n    //                     for (c = 0, lc = result.address_components.length; c < lc; c += 1) {\n    //                         component = result.address_components[c];\n    //                         if (component.types[0] === 'locality') {\n    //                           cityName = component.long_name;\n    //                             break;\n    //                         }\n    //                     }\n    //                 }\n    //                 else if (!cityName && !cityAlt && result.types[0] === 'administrative_area_level_1') {\n    //                     for (c = 0, lc = result.address_components.length; c < lc; c += 1) {\n    //                         component = result.address_components[c];\n    //                         if (component.types[0] === 'administrative_area_level_1') {\n    //                             cityAlt = component.long_name;\n    //                             break;\n    //                         }\n    //                     }\n    //                 } else if (!country && result.types[0] === 'country') {\n    //                     country = result.address_components[0].long_name;\n    //                     countryCode = result.address_components[0].short_name;\n    //                 }\n    //                 if (cityName && country) {\n    //                     break;\n    //                 }\n    //             }\n    //             console.log(\"City: \" + cityName + \", City2: \" + cityAlt + \", Country: \" + country + \", Country Code: \" + countryCode);\n    //             setCityName(cityName);\n    //             asyncLocalStorage.setItem(\"cityName\", cityName)\n    //           }\n    //         if(cityName==null || cityName==''){\n    //           geocoder.geocode({latLng: latlng}, function(results, status) {\n    //             if (status == google.maps.GeocoderStatus.OK) {\n    //               if (results[1]) {\n    //                 var arrAddress = results[1].address_components;\n    //                 console.log(\"****************\")\n    //                 console.log(results);\n    //                 arrAddress.map((address_component,index) => {\n    //                   console.log(\"==>>\")\n    //                   console.log(\"==>>>>>>>>>>\"+address_component.types[0]) \n    //                   console.log(address_component)\n    //                   if (address_component.types[0] == \"locality\") {\n    //                     console.log(\"cityName: \" + address_component.long_name);\n    //                     cityName = address_component.long_name;\n    //                     asyncLocalStorage.setItem(\"cityName\", cityName)\n    //                     setCityName(cityName);    \n    //                     // router.reload(); \n    //                   }\n    //                 })\n    //               } else {\n    //                 alert(\"No results found\");\n    //               }\n    //             } else {\n    //               alert(\"Geocoder failed due to: \" + status);\n    //             }\n    //           });\n    //         }\n    //     }\n    // });\n    // setSearchValue(result?.results[0]?.formatted_address);\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(\"form\", {\n      className: \"flex items-center border-b-2 border-gray-600\",\n      children: [/*#__PURE__*/_jsx(BiCurrentLocation, {\n        className: \"text-lg cursor-pointer\",\n        onClick: getCurrentLocation\n      }), /*#__PURE__*/_jsx(AutoComplete, {\n        suffixIcon: /*#__PURE__*/_jsx(IoIosArrowDown, {}),\n        name: \"predictionSearch\",\n        value: searchValue,\n        options: predictions,\n        onSelect: onSelect // style={{\n        //   width: 300,\n        // }}\n        ,\n        allowClear: true,\n        dropdownMatchSelectWidth: false,\n        placeholder: \"Location..\",\n        className: \"w-full text-lg py-1 \",\n        bordered: false,\n        onSearch: debounce(onSearch, 400),\n        onChange: value => {\n          onChange(value);\n          asyncLocalStorage.setItem(\"cityName\", value);\n        }\n      }), /*#__PURE__*/_jsx(IoIosArrowDown, {\n        className: \"mr-2\"\n      })]\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}