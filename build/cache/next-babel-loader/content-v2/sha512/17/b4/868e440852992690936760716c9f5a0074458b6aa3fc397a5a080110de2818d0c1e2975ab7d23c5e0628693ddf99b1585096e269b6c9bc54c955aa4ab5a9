{"ast":null,"code":"import * as types from './chefType';\nimport axiosClient from '../../../utils/axios-config';\nimport { getSession } from 'next-auth/client';\nimport axios from 'axios';\nexport function chefOrders(params = {}) {\n  return async dispatch => {\n    try {\n      const res = await axiosClient.get('order/list/chef', {\n        params: params\n      });\n      return res;\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  };\n}\nexport function chefBalanceToday(params = {}) {\n  // const todayDate = new Date().toISOString().split(\"T\")[0];\n  return async dispatch => {\n    try {\n      // console.log(`user/balance?from=${todayDate}&to=${todayDate}`);\n      const res = await axiosClient.get(`user/chef/balance`);\n      return res;\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\nexport function chefPlates(params = {}, chefId) {\n  return async dispatch => {\n    dispatch({\n      type: types.CHEF_PLATES_REQUEST\n    });\n\n    try {\n      const res = await axiosClient.get(`plate/chef/${chefId}`, {\n        params: params\n      });\n      dispatch({\n        type: types.CHEF_PLATES_SUCCESS,\n        payload: res\n      });\n      return res;\n    } catch (error) {\n      dispatch({\n        type: types.CHEF_PLATES_SUCCESS\n      });\n      return Promise.reject(error);\n    }\n  };\n}\nexport function mustTryAndRecommendedChef(params = {\n  page: 1,\n  pageSize: 10\n}) {\n  return async dispatch => {\n    try {\n      const res = await axiosClient.get('user/mustTryAndRecommendedChefs', {// params,\n      });\n      return res;\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  };\n}\nexport function addPlates(param) {\n  return async dispatch => {\n    dispatch({\n      type: types.CHEF_ADD_PLATES_REQUEST\n    });\n    const session = await getSession();\n    console.log(session.apiToken);\n\n    try {\n      const res = await axiosClient.post('plate', param, {\n        headers: {\n          'content-type': 'application/json',\n          'x-access-token': session.apiToken\n        }\n      });\n      console.log(res);\n      const status = res.status;\n\n      if (status == 201) {\n        dispatch({\n          type: types.CHEF_ADD_PLATES_SUCCESS,\n          payload: res.plate\n        });\n        return res;\n      } else {\n        dispatch({\n          type: types.CHEF_ADD_PLATES_FAILURE\n        });\n        console.log(res.status);\n        return Promise.reject();\n      }\n    } catch (e) {\n      dispatch({\n        type: types.CHEF_ADD_PLATES_FAILURE\n      });\n      return Promise.reject(e);\n    }\n  };\n}\nexport function addPlateImages(image) {\n  return async dispatch => {\n    dispatch({\n      type: types.CHEF_ADD_PLATES_IMAGES_REQUEST\n    });\n    const proxyurl = 'https://afternoon-brook-18118.herokuapp.com/';\n    const url = 'https://cheffyus-api.herokuapp.com/';\n\n    try {\n      const res = await axios.post(proxyurl + url + `images/`, image);\n      const status = res.status;\n\n      if (status === 200) {\n        dispatch({\n          type: types.CHEF_ADD_PLATES_IMAGES_SUCCESS,\n          payload: res.data.url\n        });\n        return res;\n      } else {\n        dispatch({\n          type: types.CHEF_ADD_PLATES_IMAGES_FAILURE\n        });\n        return Promise.reject();\n      }\n    } catch (error) {\n      dispatch({\n        type: types.CHEF_ADD_PLATES_IMAGES_FAILURE\n      });\n      return Promise.reject();\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}