{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from 'react';\nimport { Typography, Radio, Divider, Form, Input, Row, Col, Select, Button, Upload, message, Modal } from 'antd';\nimport { BiInfoCircle } from 'react-icons/bi';\nimport { useDispatch } from 'react-redux';\nimport { foodCategories } from '../../../redux/actions/food';\nimport { getSession, useSession } from 'next-auth/client';\nimport { useRouter } from 'next/router';\nimport { addPlateImages, addPlates } from '../../../redux/actions/chef/chefAction';\nimport { InboxOutlined } from '@ant-design/icons';\nimport filesize from 'filesize';\nimport UploadFile from './UploadFile';\nimport FileList from './FileList';\nimport axiosClient from '../../../utils/axios-config';\nconst {\n  Title\n} = Typography;\nconst {\n  Option\n} = Select;\nconst {\n  Dragger\n} = Upload;\n\nconst PlateAdd = () => {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const [session, loading] = useSession();\n  const {\n    0: uploadedFiles,\n    1: setUploadedFiles\n  } = useState([]);\n  const {\n    0: imageState,\n    1: setImageState\n  } = useState({\n    previewVisible: false,\n    previewImage: '',\n    fileList: []\n  });\n  const {\n    0: categories,\n    1: setCategories\n  } = useState('');\n  const {\n    0: formData,\n    1: setFormData\n  } = useState({\n    name: '',\n    description: '',\n    price: '',\n    delivery_time: '',\n    delivery_time_max: '',\n    delivery_type: '',\n    categoryId: 0\n  });\n  useEffect(() => {\n    if (loading === false) {\n      if (!session) {\n        router.push('/chef/login');\n      }\n\n      if (session && session.role !== 'chef') {\n        router.push('/chef/login');\n      }\n    } else return;\n  }, [session, loading]);\n  useEffect(async () => {\n    const categories = await dispatch(foodCategories());\n    const data = categories.data;\n    setCategories(data);\n  }, []);\n\n  const handleCancel = () => {\n    setImageState(_objectSpread(_objectSpread({}, imageState), {}, {\n      previewVisible: false\n    }));\n  };\n\n  const handlePreview = file => {\n    setImageState(_objectSpread(_objectSpread({}, imageState), {}, {\n      previewImage: file.thumbUrl,\n      previewVisible: true\n    }));\n  }; // const handleUpload = ({ fileList }) => {\n  // \tconsole.log('fileList', fileList);\n  // \tsetImageState({\n  // \t\t...imageState,\n  // \t\tfileList,\n  // \t});\n  // };\n\n\n  const handleUpload = files => {\n    if (files.length <= 1) {\n      const upload = files.map(file => ({\n        file,\n        name: file.name,\n        readableSize: filesize(file.size),\n        preview: URL.createObjectURL(file),\n        progress: 0,\n        uploaded: false,\n        error: false,\n        url: null\n      }));\n      setUploadedFiles(upload);\n    } else {\n      message.error('You can only upload one file');\n    }\n  };\n\n  const AddPlate = async url_image => {\n    const {\n      name,\n      description,\n      price,\n      delivery_time,\n      delivery_time_max,\n      delivery_type,\n      categoryId\n    } = formData;\n    const plateInfo = {\n      name,\n      description,\n      price,\n      delivery_time,\n      delivery_time_max,\n      delivery_type,\n      categoryId,\n      PlateImages: [{\n        name,\n        url: url_image\n      }]\n    };\n    console.log(plateInfo);\n    const res = await dispatch(addPlates(plateInfo));\n\n    if (res.status == 201) {\n      router.push('/chef/plates');\n      message.success('Plate Successfully Added');\n    } else {\n      message.error('Failed to Add Plate');\n    }\n  };\n\n  const handleSubmit = async values => {\n    // console.log(values);\n    const {\n      name,\n      description,\n      price,\n      delivery_time,\n      delivery_time_max,\n      delivery_type,\n      categoryId\n    } = values;\n    setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n      name,\n      description,\n      price,\n      delivery_time,\n      delivery_time_max,\n      delivery_type,\n      categoryId\n    }));\n\n    if (uploadedFiles[0]) {\n      const body = new FormData();\n      body.append('file', uploadedFiles[0].file);\n      const res = await dispatch(addPlateImages(body));\n      const imageUrl = res.data.url;\n      AddPlate(imageUrl);\n    } else {\n      AddPlate(null);\n    }\n  };\n\n  return !loading ? /*#__PURE__*/_jsx(\"div\", {\n    className: \"px-32 py-6 shadow-lg rounded-sm bg-white\",\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: \"flex flex-col justify-center items-center\",\n      children: [/*#__PURE__*/_jsx(Divider, {\n        children: /*#__PURE__*/_jsx(Title, {\n          level: 5,\n          children: \"Fill the Form\"\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"lg:w-6/12 w-8/12\",\n        children: /*#__PURE__*/_jsxs(Form, {\n          initialValues: {\n            ['categoryId']: 'Choose Category'\n          },\n          layout: \"vertical\",\n          name: \"add-plate\",\n          onFinish: handleSubmit,\n          scrollToFirstError: true,\n          children: [/*#__PURE__*/_jsx(Form.Item, {\n            label: \"Name of your food\",\n            className: \"font-semibold\",\n            name: \"name\",\n            rules: [{\n              required: true,\n              message: 'Fill this field'\n            }],\n            hasFeedback: true,\n            children: /*#__PURE__*/_jsx(Input, {\n              size: \"large\",\n              className: \"w-full\"\n            })\n          }), /*#__PURE__*/_jsx(Form.Item, {\n            label: \"Food description\",\n            className: \"font-semibold\",\n            name: \"description\",\n            rules: [{\n              required: true,\n              message: 'Fill this field'\n            }],\n            tooltip: {\n              title: 'If your description contains YouTube links, the videos will be shown below the description.',\n              icon: /*#__PURE__*/_jsx(BiInfoCircle, {})\n            },\n            children: /*#__PURE__*/_jsx(Input.TextArea, {\n              size: \"large\",\n              className: \"w-full\"\n            })\n          }), /*#__PURE__*/_jsx(Form.Item, {\n            label: \"Price\",\n            className: \"font-semibold\",\n            name: \"price\",\n            rules: [{\n              required: true,\n              message: 'Fill this field'\n            }],\n            children: /*#__PURE__*/_jsx(Input, {\n              type: \"number\",\n              size: \"large\",\n              placeholder: \"$\",\n              className: \"w-3/12\"\n            })\n          }), /*#__PURE__*/_jsx(Form.Item, {\n            label: \"Time\",\n            className: \"font-semibold\",\n            tooltip: {\n              title: '(required) time taken to complete food.',\n              icon: /*#__PURE__*/_jsx(BiInfoCircle, {})\n            },\n            children: /*#__PURE__*/_jsxs(Row, {\n              gutter: [8, 8],\n              align: \"\",\n              justify: 'start',\n              wrap: false,\n              className: \"-bottom-px\",\n              children: [/*#__PURE__*/_jsx(Col, {\n                className: \"w-3/12\",\n                span: 6,\n                children: /*#__PURE__*/_jsx(Form.Item, {\n                  name: \"delivery_time\",\n                  children: /*#__PURE__*/_jsx(Input, {\n                    placeholder: \"20min\",\n                    type: \"number\",\n                    size: \"large\"\n                  })\n                })\n              }), /*#__PURE__*/_jsx(Col, {\n                className: \"mt-2\",\n                children: \"to\"\n              }), /*#__PURE__*/_jsx(Col, {\n                className: \"w-3/12\",\n                children: /*#__PURE__*/_jsx(Form.Item, {\n                  name: \"delivery_time_max\",\n                  children: /*#__PURE__*/_jsx(Input, {\n                    placeholder: \"30min\",\n                    type: \"number\",\n                    size: \"large\"\n                  })\n                })\n              })]\n            })\n          }), /*#__PURE__*/_jsx(Form.Item, {\n            label: \"Food category\",\n            className: \"font-semibold -mt-6\",\n            name: \"categoryId\",\n            rules: [{\n              required: true,\n              message: 'Fill this field'\n            }],\n            children: /*#__PURE__*/_jsx(Select, {\n              className: \"w-full\",\n              size: \"large\",\n              children: categories && categories.map(category => /*#__PURE__*/_jsx(Option, {\n                value: category.id,\n                children: category.name\n              }, category.id))\n            })\n          }), /*#__PURE__*/_jsx(Form.Item, {\n            label: \"Delivery type\",\n            className: \"font-semibold\",\n            name: \"delivery_type\",\n            rules: [{\n              required: true,\n              message: 'Fill this field'\n            }],\n            children: /*#__PURE__*/_jsxs(Radio.Group, {\n              buttonStyle: \"solid\",\n              size: \"large\",\n              className: \"w-full\",\n              children: [/*#__PURE__*/_jsx(Radio.Button, {\n                value: \"free\",\n                className: \"w-3/6\",\n                children: \"Free Delivery\"\n              }), /*#__PURE__*/_jsx(Radio.Button, {\n                value: \"paid\",\n                className: \"w-3/6\",\n                children: \"Paid Delivery\"\n              })]\n            })\n          }), /*#__PURE__*/_jsxs(Form.Item, {\n            name: \"picture\",\n            label: \"Upload Your Food Image\",\n            className: \"-mt-8 font-semibold\",\n            tooltip: {\n              title: 'For best results, use JPG, GIF or PNG images',\n              icon: /*#__PURE__*/_jsx(BiInfoCircle, {})\n            },\n            children: [/*#__PURE__*/_jsx(UploadFile, {\n              onUpload: handleUpload\n            }), !!uploadedFiles.length && /*#__PURE__*/_jsx(FileList, {\n              file: uploadedFiles[0]\n            })]\n          }), /*#__PURE__*/_jsx(Form.Item, {\n            children: /*#__PURE__*/_jsx(Button, {\n              type: \"primary\",\n              size: \"large\",\n              className: \"font-semibold w-4/12\",\n              htmlType: \"submit\",\n              children: \"Add Plate\"\n            })\n          })]\n        })\n      })]\n    })\n  }) : '';\n};\n\nexport default PlateAdd;","map":null,"metadata":{},"sourceType":"module"}