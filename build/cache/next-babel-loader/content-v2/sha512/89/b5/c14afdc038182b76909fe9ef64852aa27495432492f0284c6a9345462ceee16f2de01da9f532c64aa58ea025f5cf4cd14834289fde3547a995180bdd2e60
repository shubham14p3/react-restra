{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as types from \"../actions/cart/cartType\";\nconst INITIAL_STATE = {\n  items: [],\n  cart: [],\n  itemCount: 0,\n  cartItemSetWithSessionFlag: false,\n  cartItemSetWithoutSessionFlag: false\n};\n\nconst cartReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case types.CART_ADD_ITEM:\n      // Great Item data from products array\n      const item = {\n        ordered: 1,\n        plateId: action.payload\n      }; // Check if Item is in cart already\n\n      const inCart = state.cart.find(item => item.plateId === action.payload ? true : false);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cart: inCart ? state.cart : [...state.cart, item]\n      });\n      break;\n\n    case types.CART_REMOVE_ITEM:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cart: state.cart.filter(item => item.plateId !== action.payload)\n      });\n      break;\n\n    case types.CART_INCREASE_ITEM:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        itemCount: state.cart.length\n      });\n      break;\n\n    case types.CART_DECREASE_ITEM:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        itemCount: state.cart.length\n      });\n      break;\n\n    case types.CART_SET_ITEM_COUNT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cart: action.payload,\n        itemCount: action.payload.length\n      });\n      break;\n\n    case types.CART_SET_ITEM_COUNT_WITH_SESSION_FLAG:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cartItemSetWithSessionFlag: true\n      });\n      break;\n\n    case types.CART_SET_ITEM_COUNT_WITHOUT_SESSION_FLAG:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cartItemSetWithoutSessionFlag: true\n      });\n      break;\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer; // const cartCounter = (state = 0, { type }) => {\n//   switch (type) {\n//     case \"CART_ITEM_ADD\":\n//       console.log(\"Adding.!\",state+1,state)\n//       console.log(window.localStorage.getItem(\"cartitems\"))\n//       return state+1;\n//     case \"CART_ITEM_REMOVE\":\n//       return state - 1;\n//     default:\n//       return state;\n//   }\n// };\n// export const cartReducer = produce(cartCounter);","map":null,"metadata":{},"sourceType":"module"}