{"ast":null,"code":"import jwt_decode from 'jwt-decode';\nimport axiosClient from '../../../utils/axios-config';\nimport * as types from './authType';\nimport { asyncLocalStorage } from '../../../utils/localStorage';\nimport config from '../../../config';\nexport function userLogin(params) {\n  return async dispatch => {\n    dispatch({\n      type: types.AUTH_LOGIN_REQUEST\n    });\n\n    try {\n      const res = await axiosClient.post('user/login', params, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const decoded = jwt_decode(res.token);\n      console.log(res);\n      dispatch({\n        type: types.AUTH_LOGIN_SUCCESS,\n        payload: decoded\n      });\n      return res;\n    } catch (error) {\n      //console.log('error', error);\n      dispatch({\n        type: types.AUTH_LOGIN_FAILURE\n      });\n      return Promise.reject(error);\n    }\n  };\n}\nexport function userLoginSocial(params) {\n  return async dispatch => {\n    dispatch({\n      type: types.AUTH_LOGIN_REQUEST\n    });\n\n    try {\n      const res = await axiosClient.post('user/socialauth', params, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const decoded = jwt_decode(res.token);\n      console.log(res);\n      dispatch({\n        type: types.AUTH_LOGIN_SUCCESS,\n        payload: decoded\n      });\n      return res;\n    } catch (error) {\n      //console.log('error', error);\n      dispatch({\n        type: types.AUTH_LOGIN_FAILURE\n      });\n      return Promise.reject(error);\n    }\n  };\n}\nexport function userSignup(parms) {\n  return async dispatch => {\n    dispatch({\n      type: types.AUTH_SIGNUP_REQUEST\n    });\n\n    try {\n      console.log(parms);\n      const res = await axiosClient.post('user/complete-registration', parms, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }); // console.log(res)\n\n      const status = res.status;\n\n      if (status == 201) {\n        dispatch({\n          type: types.AUTH_SIGNUP_SUCCESS,\n          payload: res.result.name\n        });\n        return res.status;\n      } else {\n        dispatch({\n          type: types.AUTH_SIGNUP_FAILURE\n        });\n        return Promise.reject(e);\n      }\n    } catch (e) {\n      dispatch({\n        type: types.AUTH_SIGNUP_FAILURE\n      });\n      return Promise.reject(e);\n    }\n  };\n}\nexport async function saveTokens(params) {\n  try {\n    //console.log(\"saveTokens params\", params);\n    const {\n      access_token,\n      decoded\n    } = params;\n    const {\n      expires_in,\n      type\n    } = decoded;\n    const expires_at = new Date();\n    expires_at.setSeconds(expires_at.getSeconds() + expires_in);\n    await asyncLocalStorage.setItem(config.AUTH_IN, expires_in);\n    await asyncLocalStorage.setItem(config.AUTH_AT, expires_at.getTime());\n    await asyncLocalStorage.setItem(config.AUTH_TOKEN, access_token);\n    await asyncLocalStorage.setItem(config.AUTH_TYPE, type);\n    return Promise.resolve(true);\n  } catch (err) {\n    throw err;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}