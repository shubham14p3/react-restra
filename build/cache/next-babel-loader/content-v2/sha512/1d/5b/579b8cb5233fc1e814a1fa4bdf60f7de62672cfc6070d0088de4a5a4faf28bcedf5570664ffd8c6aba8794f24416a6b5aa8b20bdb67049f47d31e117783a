{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { getSession } from 'next-auth/client';\nimport config from '../config';\nvar axiosClient = axios.create({\n  baseURL: \"\".concat(config.BASE_URL, \"/\")\n});\naxiosClient.interceptors.request.use( /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(config) {\n    var session;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getSession();\n\n          case 2:\n            session = _context.sent;\n\n            if (session && session.apiToken) {\n              // console.log('axiosClient session', session.apiToken);\n              config.headers['x-access-token'] = session.apiToken;\n            }\n\n            return _context.abrupt(\"return\", config);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}(), function (error) {\n  return Promise.reject(error);\n});\naxiosClient.interceptors.response.use(function (response) {\n  // console.debug('Axios onResponseSuccess', response);\n  return response.data;\n}, function (error) {\n  // console.debug('Axios onResponseError', error.response);\n  if (error.response && error.response.status === 403) {\n    return Promise.reject(error.response.data);\n  }\n\n  return Promise.reject(error);\n});\nexport default axiosClient;","map":null,"metadata":{},"sourceType":"module"}