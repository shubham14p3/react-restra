{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport { AutoComplete } from 'antd';\nimport { googleAutocomplete } from \"./google-autocomplete\";\nimport \"./auto-complete.css\";\nimport { IoIosArrowDown, IoIosLocate } from \"react-icons/io\";\nimport { BiCurrentLocation } from \"react-icons/bi\";\nimport { GEO_CODE_API_URL } from \"../../../constants\";\nimport { asyncLocalStorage } from '../../utils/localStorage';\nimport { useRouter } from 'next/router';\n\nfunction debounce(func) {\n  var _this = this;\n\n  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;\n  var timer;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    clearTimeout(timer);\n    timer = setTimeout(function () {\n      func.apply(_this, args);\n    }, timeout);\n  };\n}\n\nvar geocoder;\nexport default function PredictionsOnInputChange(_ref) {\n  var searchValue = _ref.searchValue,\n      _onChange = _ref.onChange,\n      setSearchValue = _ref.setSearchValue;\n  var router = useRouter();\n\n  var _useState = useState([]),\n      predictions = _useState[0],\n      setPredictions = _useState[1];\n\n  var _useState2 = useState(null),\n      cityName = _useState2[0],\n      setCityName = _useState2[1];\n\n  console.log(setSearchValue, _onChange);\n\n  var onSelect = function onSelect(data) {\n    console.log('onSelect', data);\n  };\n\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (cityName != null) {\n              router.reload();\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), []);\n\n  var onSearch = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(text) {\n      var nextPredictions, results;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n\n              if (text) {\n                _context2.next = 4;\n                break;\n              }\n\n              setPredictions([]);\n              return _context2.abrupt(\"return\");\n\n            case 4:\n              _context2.next = 6;\n              return googleAutocomplete(text);\n\n            case 6:\n              nextPredictions = _context2.sent;\n              results = nextPredictions.map(function (prediction, index) {\n                var _prediction$structure;\n\n                var label = prediction === null || prediction === void 0 ? void 0 : (_prediction$structure = prediction.structured_formatting) === null || _prediction$structure === void 0 ? void 0 : _prediction$structure.main_text;\n                return {\n                  key: index,\n                  value: label,\n                  label: label\n                };\n              });\n              setPredictions(results);\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error(_context2.t0);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 11]]);\n    }));\n\n    return function onSearch(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var getCurrentLocation = function getCurrentLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(showPosition);\n    }\n  };\n\n  var showPosition = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(position) {\n      var _result$results$, _result$results$2;\n\n      var lat, _long, apiUrl, rawRespnse, result;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // const lat = position.coords.latitude;\n              // const long = position.coords.longitude;\n              lat = \"43.20577420\";\n              _long = \"-77.66710000\"; // const lat = \"43.12285180\";\n              // const long = \"-77.61803020\";\n\n              apiUrl = \"\".concat(GEO_CODE_API_URL, \"&latlng=\").concat(lat, \",\").concat(_long);\n              _context3.next = 5;\n              return fetch(apiUrl);\n\n            case 5:\n              rawRespnse = _context3.sent;\n              _context3.next = 8;\n              return rawRespnse.json();\n\n            case 8:\n              result = _context3.sent;\n\n              _onChange(result === null || result === void 0 ? void 0 : (_result$results$ = result.results[0]) === null || _result$results$ === void 0 ? void 0 : _result$results$.formatted_address);\n\n              console.log(result === null || result === void 0 ? void 0 : result.results[0]);\n              console.log(\"address: \" + (result === null || result === void 0 ? void 0 : (_result$results$2 = result.results[0]) === null || _result$results$2 === void 0 ? void 0 : _result$results$2.formatted_address)); // geocoder = new window.google.maps.Geocoder();\n              // var latlng = new google.maps.LatLng(lat, long);\n              // var itemLocality=\"\";\n              //   var country = null, countryCode = null, cityName = null, cityAlt = null;\n              //   new window.google.maps.Geocoder().geocode({'latLng' : latlng}, function(results, status) {\n              //     if (status == google.maps.GeocoderStatus.OK) {\n              //         if (results[1]) {\n              //             var c, lc, component;\n              //             for (var r = 0, rl = results.length; r < rl; r += 1) {\n              //                 var result = results[r];\n              //                 if (!cityName && result.types[0] === 'locality') {\n              //                     for (c = 0, lc = result.address_components.length; c < lc; c += 1) {\n              //                         component = result.address_components[c];\n              //                         if (component.types[0] === 'locality') {\n              //                           cityName = component.long_name;\n              //                             break;\n              //                         }\n              //                     }\n              //                 }\n              //                 else if (!cityName && !cityAlt && result.types[0] === 'administrative_area_level_1') {\n              //                     for (c = 0, lc = result.address_components.length; c < lc; c += 1) {\n              //                         component = result.address_components[c];\n              //                         if (component.types[0] === 'administrative_area_level_1') {\n              //                             cityAlt = component.long_name;\n              //                             break;\n              //                         }\n              //                     }\n              //                 } else if (!country && result.types[0] === 'country') {\n              //                     country = result.address_components[0].long_name;\n              //                     countryCode = result.address_components[0].short_name;\n              //                 }\n              //                 if (cityName && country) {\n              //                     break;\n              //                 }\n              //             }\n              //             console.log(\"City: \" + cityName + \", City2: \" + cityAlt + \", Country: \" + country + \", Country Code: \" + countryCode);\n              //             setCityName(cityName);\n              //             asyncLocalStorage.setItem(\"cityName\", cityName)\n              //           }\n              //         if(cityName==null || cityName==''){\n              //           geocoder.geocode({latLng: latlng}, function(results, status) {\n              //             if (status == google.maps.GeocoderStatus.OK) {\n              //               if (results[1]) {\n              //                 var arrAddress = results[1].address_components;\n              //                 console.log(\"****************\")\n              //                 console.log(results);\n              //                 arrAddress.map((address_component,index) => {\n              //                   console.log(\"==>>\")\n              //                   console.log(\"==>>>>>>>>>>\"+address_component.types[0]) \n              //                   console.log(address_component)\n              //                   if (address_component.types[0] == \"locality\") {\n              //                     console.log(\"cityName: \" + address_component.long_name);\n              //                     cityName = address_component.long_name;\n              //                     asyncLocalStorage.setItem(\"cityName\", cityName)\n              //                     setCityName(cityName);    \n              //                     // router.reload(); \n              //                   }\n              //                 })\n              //               } else {\n              //                 alert(\"No results found\");\n              //               }\n              //             } else {\n              //               alert(\"Geocoder failed due to: \" + status);\n              //             }\n              //           });\n              //         }\n              //     }\n              // });\n              // setSearchValue(result?.results[0]?.formatted_address);\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function showPosition(_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(\"form\", {\n      className: \"flex items-center border-b-2 border-gray-600\",\n      children: [/*#__PURE__*/_jsx(BiCurrentLocation, {\n        className: \"text-lg cursor-pointer\",\n        onClick: getCurrentLocation\n      }), /*#__PURE__*/_jsx(AutoComplete, {\n        suffixIcon: /*#__PURE__*/_jsx(IoIosArrowDown, {}),\n        name: \"predictionSearch\",\n        value: searchValue,\n        options: predictions,\n        onSelect: onSelect // style={{\n        //   width: 300,\n        // }}\n        ,\n        allowClear: true,\n        dropdownMatchSelectWidth: false,\n        placeholder: \"Location..\",\n        className: \"w-full text-lg py-1 \",\n        bordered: false,\n        onSearch: debounce(onSearch, 400),\n        onChange: function onChange(value) {\n          _onChange(value);\n\n          asyncLocalStorage.setItem(\"cityName\", value);\n        }\n      }), /*#__PURE__*/_jsx(IoIosArrowDown, {\n        className: \"mr-2\"\n      })]\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}