{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useState } from 'react';\nimport { Typography, Radio, Divider, Form, Input, Row, Col, Select, Button, Upload, message, Modal } from 'antd';\nimport { BiInfoCircle } from 'react-icons/bi';\nimport { useDispatch } from 'react-redux';\nimport { foodCategories } from '../../../redux/actions/food';\nimport { getSession, useSession } from 'next-auth/client';\nimport { useRouter } from 'next/router';\nimport { addPlateImages, addPlates } from '../../../redux/actions/chef/chefAction';\nimport { InboxOutlined } from '@ant-design/icons';\nimport filesize from 'filesize';\nimport UploadFile from './UploadFile';\nimport FileList from './FileList';\nimport axiosClient from '../../../utils/axios-config';\nvar Title = Typography.Title;\nvar Option = Select.Option;\nvar Dragger = Upload.Dragger;\n\nvar PlateAdd = function PlateAdd() {\n  var dispatch = useDispatch();\n  var router = useRouter();\n\n  var _useSession = useSession(),\n      _useSession2 = _slicedToArray(_useSession, 2),\n      session = _useSession2[0],\n      loading = _useSession2[1];\n\n  var _useState = useState([]),\n      uploadedFiles = _useState[0],\n      setUploadedFiles = _useState[1];\n\n  var _useState2 = useState({\n    previewVisible: false,\n    previewImage: '',\n    fileList: []\n  }),\n      imageState = _useState2[0],\n      setImageState = _useState2[1];\n\n  var _useState3 = useState(''),\n      categories = _useState3[0],\n      setCategories = _useState3[1];\n\n  var _useState4 = useState({\n    name: '',\n    description: '',\n    price: '',\n    delivery_time: '',\n    delivery_time_max: '',\n    delivery_type: '',\n    categoryId: 0\n  }),\n      formData = _useState4[0],\n      setFormData = _useState4[1];\n\n  useEffect(function () {\n    if (loading === false) {\n      if (!session) {\n        router.push('/chef/login');\n      }\n\n      if (session && session.role !== 'chef') {\n        router.push('/chef/login');\n      }\n    } else return;\n  }, [session, loading]);\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var categories, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return dispatch(foodCategories());\n\n          case 2:\n            categories = _context.sent;\n            data = categories.data;\n            setCategories(data);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), []);\n\n  var handleCancel = function handleCancel() {\n    setImageState(_objectSpread(_objectSpread({}, imageState), {}, {\n      previewVisible: false\n    }));\n  };\n\n  var handlePreview = function handlePreview(file) {\n    setImageState(_objectSpread(_objectSpread({}, imageState), {}, {\n      previewImage: file.thumbUrl,\n      previewVisible: true\n    }));\n  }; // const handleUpload = ({ fileList }) => {\n  // \tconsole.log('fileList', fileList);\n  // \tsetImageState({\n  // \t\t...imageState,\n  // \t\tfileList,\n  // \t});\n  // };\n\n\n  var handleUpload = function handleUpload(files) {\n    if (files.length <= 1) {\n      var upload = files.map(function (file) {\n        return {\n          file: file,\n          name: file.name,\n          readableSize: filesize(file.size),\n          preview: URL.createObjectURL(file),\n          progress: 0,\n          uploaded: false,\n          error: false,\n          url: null\n        };\n      });\n      setUploadedFiles(upload);\n    } else {\n      message.error('You can only upload one file');\n    }\n  };\n\n  var AddPlate = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url_image) {\n      var name, description, price, delivery_time, delivery_time_max, delivery_type, categoryId, plateInfo, res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              name = formData.name, description = formData.description, price = formData.price, delivery_time = formData.delivery_time, delivery_time_max = formData.delivery_time_max, delivery_type = formData.delivery_type, categoryId = formData.categoryId;\n              plateInfo = {\n                name: name,\n                description: description,\n                price: price,\n                delivery_time: delivery_time,\n                delivery_time_max: delivery_time_max,\n                delivery_type: delivery_type,\n                categoryId: categoryId,\n                PlateImages: [{\n                  name: name,\n                  url: url_image\n                }]\n              };\n              console.log(plateInfo);\n              _context2.next = 5;\n              return dispatch(addPlates(plateInfo));\n\n            case 5:\n              res = _context2.sent;\n\n              if (res.status == 201) {\n                router.push('/chef/plates');\n                message.success('Plate Successfully Added');\n              } else {\n                message.error('Failed to Add Plate');\n              }\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function AddPlate(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(values) {\n      var name, description, price, delivery_time, delivery_time_max, delivery_type, categoryId, body, res, imageUrl;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // console.log(values);\n              name = values.name, description = values.description, price = values.price, delivery_time = values.delivery_time, delivery_time_max = values.delivery_time_max, delivery_type = values.delivery_type, categoryId = values.categoryId;\n              setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n                name: name,\n                description: description,\n                price: price,\n                delivery_time: delivery_time,\n                delivery_time_max: delivery_time_max,\n                delivery_type: delivery_type,\n                categoryId: categoryId\n              }));\n\n              if (!uploadedFiles[0]) {\n                _context3.next = 12;\n                break;\n              }\n\n              body = new FormData();\n              body.append('file', uploadedFiles[0].file);\n              _context3.next = 7;\n              return dispatch(addPlateImages(body));\n\n            case 7:\n              res = _context3.sent;\n              imageUrl = res.data.url;\n              AddPlate(imageUrl);\n              _context3.next = 13;\n              break;\n\n            case 12:\n              AddPlate(null);\n\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function handleSubmit(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return !loading ? /*#__PURE__*/_jsx(\"div\", {\n    className: \"px-32 py-6 shadow-lg rounded-sm bg-white\",\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: \"flex flex-col justify-center items-center\",\n      children: [/*#__PURE__*/_jsx(Divider, {\n        children: /*#__PURE__*/_jsx(Title, {\n          level: 5,\n          children: \"Fill the Form\"\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"lg:w-6/12 w-8/12\",\n        children: /*#__PURE__*/_jsxs(Form, {\n          initialValues: _defineProperty({}, 'categoryId', 'Choose Category'),\n          layout: \"vertical\",\n          name: \"add-plate\",\n          onFinish: handleSubmit,\n          scrollToFirstError: true,\n          children: [/*#__PURE__*/_jsx(Form.Item, {\n            label: \"Name of your food\",\n            className: \"font-semibold\",\n            name: \"name\",\n            rules: [{\n              required: true,\n              message: 'Fill this field'\n            }],\n            hasFeedback: true,\n            children: /*#__PURE__*/_jsx(Input, {\n              size: \"large\",\n              className: \"w-full\"\n            })\n          }), /*#__PURE__*/_jsx(Form.Item, {\n            label: \"Food description\",\n            className: \"font-semibold\",\n            name: \"description\",\n            rules: [{\n              required: true,\n              message: 'Fill this field'\n            }],\n            tooltip: {\n              title: 'If your description contains YouTube links, the videos will be shown below the description.',\n              icon: /*#__PURE__*/_jsx(BiInfoCircle, {})\n            },\n            children: /*#__PURE__*/_jsx(Input.TextArea, {\n              size: \"large\",\n              className: \"w-full\"\n            })\n          }), /*#__PURE__*/_jsx(Form.Item, {\n            label: \"Price\",\n            className: \"font-semibold\",\n            name: \"price\",\n            rules: [{\n              required: true,\n              message: 'Fill this field'\n            }],\n            children: /*#__PURE__*/_jsx(Input, {\n              type: \"number\",\n              size: \"large\",\n              placeholder: \"$\",\n              className: \"w-3/12\"\n            })\n          }), /*#__PURE__*/_jsx(Form.Item, {\n            label: \"Time\",\n            className: \"font-semibold\",\n            tooltip: {\n              title: '(required) time taken to complete food.',\n              icon: /*#__PURE__*/_jsx(BiInfoCircle, {})\n            },\n            children: /*#__PURE__*/_jsxs(Row, {\n              gutter: [8, 8],\n              align: \"\",\n              justify: 'start',\n              wrap: false,\n              className: \"-bottom-px\",\n              children: [/*#__PURE__*/_jsx(Col, {\n                className: \"w-3/12\",\n                span: 6,\n                children: /*#__PURE__*/_jsx(Form.Item, {\n                  name: \"delivery_time\",\n                  children: /*#__PURE__*/_jsx(Input, {\n                    placeholder: \"20min\",\n                    type: \"number\",\n                    size: \"large\"\n                  })\n                })\n              }), /*#__PURE__*/_jsx(Col, {\n                className: \"mt-2\",\n                children: \"to\"\n              }), /*#__PURE__*/_jsx(Col, {\n                className: \"w-3/12\",\n                children: /*#__PURE__*/_jsx(Form.Item, {\n                  name: \"delivery_time_max\",\n                  children: /*#__PURE__*/_jsx(Input, {\n                    placeholder: \"30min\",\n                    type: \"number\",\n                    size: \"large\"\n                  })\n                })\n              })]\n            })\n          }), /*#__PURE__*/_jsx(Form.Item, {\n            label: \"Food category\",\n            className: \"font-semibold -mt-6\",\n            name: \"categoryId\",\n            rules: [{\n              required: true,\n              message: 'Fill this field'\n            }],\n            children: /*#__PURE__*/_jsx(Select, {\n              className: \"w-full\",\n              size: \"large\",\n              children: categories && categories.map(function (category) {\n                return /*#__PURE__*/_jsx(Option, {\n                  value: category.id,\n                  children: category.name\n                }, category.id);\n              })\n            })\n          }), /*#__PURE__*/_jsx(Form.Item, {\n            label: \"Delivery type\",\n            className: \"font-semibold\",\n            name: \"delivery_type\",\n            rules: [{\n              required: true,\n              message: 'Fill this field'\n            }],\n            children: /*#__PURE__*/_jsxs(Radio.Group, {\n              buttonStyle: \"solid\",\n              size: \"large\",\n              className: \"w-full\",\n              children: [/*#__PURE__*/_jsx(Radio.Button, {\n                value: \"free\",\n                className: \"w-3/6\",\n                children: \"Free Delivery\"\n              }), /*#__PURE__*/_jsx(Radio.Button, {\n                value: \"paid\",\n                className: \"w-3/6\",\n                children: \"Paid Delivery\"\n              })]\n            })\n          }), /*#__PURE__*/_jsxs(Form.Item, {\n            name: \"picture\",\n            label: \"Upload Your Food Image\",\n            className: \"-mt-8 font-semibold\",\n            tooltip: {\n              title: 'For best results, use JPG, GIF or PNG images',\n              icon: /*#__PURE__*/_jsx(BiInfoCircle, {})\n            },\n            children: [/*#__PURE__*/_jsx(UploadFile, {\n              onUpload: handleUpload\n            }), !!uploadedFiles.length && /*#__PURE__*/_jsx(FileList, {\n              file: uploadedFiles[0]\n            })]\n          }), /*#__PURE__*/_jsx(Form.Item, {\n            children: /*#__PURE__*/_jsx(Button, {\n              type: \"primary\",\n              size: \"large\",\n              className: \"font-semibold w-4/12\",\n              htmlType: \"submit\",\n              children: \"Add Plate\"\n            })\n          })]\n        })\n      })]\n    })\n  }) : '';\n};\n\nexport default PlateAdd;","map":null,"metadata":{},"sourceType":"module"}