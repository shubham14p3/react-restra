{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { memo, useCallback, useLayoutEffect, useRef, useState } from \"react\";\nimport usePrevious from '../../../../../utils/hooks/usePrevious';\n\nfunction SingleOTPInputComponent(props) {\n  var focus = props.focus,\n      autoFocus = props.autoFocus,\n      rest = _objectWithoutProperties(props, [\"focus\", \"autoFocus\"]);\n\n  var inputRef = useRef(null);\n  var prevFocus = usePrevious(!!focus);\n  useLayoutEffect(function () {\n    if (inputRef.current) {\n      if (focus && autoFocus) {\n        inputRef.current.focus();\n      }\n\n      if (focus && autoFocus && focus !== prevFocus) {\n        inputRef.current.focus();\n        inputRef.current.select();\n      }\n    }\n  }, [autoFocus, focus, prevFocus]);\n  return /*#__PURE__*/_jsx(\"input\", _objectSpread({\n    ref: inputRef\n  }, rest));\n}\n\nvar SingleInput = /*#__PURE__*/React.memo(SingleOTPInputComponent);\nexport function OTPInputComponent(props) {\n  var length = props.length,\n      isNumberInput = props.isNumberInput,\n      autoFocus = props.autoFocus,\n      disabled = props.disabled,\n      onChangeOTP = props.onChangeOTP,\n      inputClassName = props.inputClassName,\n      inputStyle = props.inputStyle,\n      rest = _objectWithoutProperties(props, [\"length\", \"isNumberInput\", \"autoFocus\", \"disabled\", \"onChangeOTP\", \"inputClassName\", \"inputStyle\"]);\n\n  var _useState = useState(0),\n      activeInput = _useState[0],\n      setActiveInput = _useState[1];\n\n  var _useState2 = useState(Array(length).fill(\"\")),\n      otpValues = _useState2[0],\n      setOTPValues = _useState2[1]; // Helper to return OTP from inputs\n\n\n  var handleOtpChange = useCallback(function (otp) {\n    var otpValue = otp.join(\"\");\n    onChangeOTP(otpValue);\n  }, [onChangeOTP]); // Helper to return value with the right type: 'text' or 'number'\n\n  var getRightValue = useCallback(function (str) {\n    var changedValue = str;\n\n    if (!isNumberInput) {\n      return changedValue;\n    }\n\n    return !changedValue || /\\d/.test(changedValue) ? changedValue : \"\";\n  }, [isNumberInput]); // Change OTP value at focussing input\n\n  var changeCodeAtFocus = useCallback(function (str) {\n    var updatedOTPValues = _toConsumableArray(otpValues);\n\n    updatedOTPValues[activeInput] = str[0] || \"\";\n    setOTPValues(updatedOTPValues);\n    handleOtpChange(updatedOTPValues);\n  }, [activeInput, handleOtpChange, otpValues]); // Focus `inputIndex` input\n\n  var focusInput = useCallback(function (inputIndex) {\n    var selectedIndex = Math.max(Math.min(length - 1, inputIndex), 0);\n    setActiveInput(selectedIndex);\n  }, [length]);\n  var focusPrevInput = useCallback(function () {\n    focusInput(activeInput - 1);\n  }, [activeInput, focusInput]);\n  var focusNextInput = useCallback(function () {\n    focusInput(activeInput + 1);\n  }, [activeInput, focusInput]); // Handle onFocus input\n\n  var handleOnFocus = useCallback(function (index) {\n    return function () {\n      focusInput(index);\n    };\n  }, [focusInput]); // Handle onChange value for each input\n\n  var handleOnChange = useCallback(function (e) {\n    var val = getRightValue(e.currentTarget.value);\n\n    if (!val) {\n      e.preventDefault();\n      return;\n    }\n\n    changeCodeAtFocus(val);\n    focusNextInput();\n  }, [changeCodeAtFocus, focusNextInput, getRightValue]); // Hanlde onBlur input\n\n  var onBlur = useCallback(function () {\n    setActiveInput(-1);\n  }, []); // Handle onKeyDown input\n\n  var handleOnKeyDown = useCallback(function (e) {\n    switch (e.key) {\n      case \"Backspace\":\n      case \"Delete\":\n        {\n          e.preventDefault();\n\n          if (otpValues[activeInput]) {\n            changeCodeAtFocus(\"\");\n          } else {\n            focusPrevInput();\n          }\n\n          break;\n        }\n\n      case \"ArrowLeft\":\n        {\n          e.preventDefault();\n          focusPrevInput();\n          break;\n        }\n\n      case \"ArrowRight\":\n        {\n          e.preventDefault();\n          focusNextInput();\n          break;\n        }\n\n      case \" \":\n        {\n          e.preventDefault();\n          break;\n        }\n\n      default:\n        break;\n    }\n  }, [activeInput, changeCodeAtFocus, focusNextInput, focusPrevInput, otpValues]);\n  var handleOnPaste = useCallback(function (e) {\n    e.preventDefault();\n    var pastedData = e.clipboardData.getData(\"text/plain\").trim().slice(0, length - activeInput).split(\"\");\n\n    if (pastedData) {\n      var nextFocusIndex = 0;\n\n      var updatedOTPValues = _toConsumableArray(otpValues);\n\n      updatedOTPValues.forEach(function (val, index) {\n        if (index >= activeInput) {\n          var changedValue = getRightValue(pastedData.shift() || val);\n\n          if (changedValue) {\n            updatedOTPValues[index] = changedValue;\n            nextFocusIndex = index;\n          }\n        }\n      });\n      setOTPValues(updatedOTPValues);\n      setActiveInput(Math.min(nextFocusIndex + 1, length - 1));\n    }\n  }, [activeInput, getRightValue, length, otpValues]);\n  return /*#__PURE__*/_jsx(\"div\", _objectSpread(_objectSpread({}, rest), {}, {\n    children: Array(length).fill(\"\").map(function (_, index) {\n      return /*#__PURE__*/_jsx(SingleInput, {\n        focus: activeInput === index,\n        autocomplete: \"new-password\",\n        value: otpValues && otpValues[index],\n        autoFocus: autoFocus,\n        onFocus: handleOnFocus(index),\n        onChange: handleOnChange,\n        onKeyDown: handleOnKeyDown,\n        onBlur: onBlur,\n        onPaste: handleOnPaste,\n        style: inputStyle,\n        className: inputClassName,\n        disabled: disabled\n      }, \"SingleInput-\".concat(index));\n    })\n  }));\n}\nvar OTPInput = /*#__PURE__*/memo(OTPInputComponent);\nexport default OTPInput;","map":null,"metadata":{},"sourceType":"module"}