{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from 'react';\nimport { Skeleton } from 'antd';\nimport Router from 'next/router';\nimport { useSession } from 'next-auth/client'; // import { getSession } from \"next-auth/client\";\n// import redirect from \"./redirect\";\n// export default function (props) {\n//   const { Component, pageProps } = props;\n//   console.log(\"Component\", Component);\n//   console.log(\"pageProps\", pageProps);\n//   return <Component />;\n// }\n// export async function getServerSideProps(ctx) {\n//   const session = await getSession(ctx);\n//   console.log(\"getServerSideProps session\", session);\n//   if (session) {\n//     return redirect(ctx, \"/\");\n//   }\n//   return {\n//     props: { session },\n//   };\n// }\n\nvar ProtectedChef = function ProtectedChef(WrappedComponent) {\n  return function (props) {\n    var _useSession = useSession(),\n        _useSession2 = _slicedToArray(_useSession, 2),\n        session = _useSession2[0],\n        loading = _useSession2[1]; // console.log(\"ProtectedChef loading\", loading);\n    // console.log(\"ProtectedChef session\", session);\n\n\n    if (loading) return /*#__PURE__*/_jsx(Skeleton, {});\n\n    if (!(session && session.role == 'chef')) {\n      Router.push('chef/login');\n      return /*#__PURE__*/_jsx(\"p\", {\n        children: \"Access Denied\"\n      });\n    }\n\n    return /*#__PURE__*/_jsx(WrappedComponent, {\n      session: session\n    });\n  };\n};\n\nexport default ProtectedChef;","map":null,"metadata":{},"sourceType":"module"}